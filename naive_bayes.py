# -*- coding: utf-8 -*-
"""Naive Bayes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UCi5tTatoizcJ0hSr5POsaem4yjQPSv4
"""

#importing needed Libraries for this Assignemnt
import numpy as np
import pandas as pd
import sklearn
import time
from sklearn.naive_bayes import GaussianNB
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

from sklearn import metrics
from sklearn.metrics import accuracy_score

#Load train and test dataset
train_data =pd.read_csv('/content/SalaryData_Train.csv')
test_data= pd.read_csv('/content/SalaryData_Test.csv')

print(train_data.columns) #check all features of train data set

print(test_data.columns) # Check all features of test data set

train_data['Salary'] # check salary fetures with data

# label Encoding
encoder = LabelEncoder()
train_data['Salary'] = encoder.fit_transform(train_data['Salary'])
test_data['Salary'] = encoder.transform(test_data['Salary'])

X_train = train_data.drop('Salary', axis=1)
y_train = train_data['Salary']
X_test = test_data.drop('Salary', axis=1)
y_test = test_data['Salary']

# Features (X) and Target (y) for both train and test datasets
X_train = train_data[['age', 'workclass', 'education', 'educationno', 'maritalstatus',
                     'occupation', 'relationship', 'race', 'sex', 'capitalgain',
                     'capitalloss', 'hoursperweek', 'native']]
y_train = train_data['Salary']

X_test = test_data[['age', 'workclass', 'education', 'educationno', 'maritalstatus',
                   'occupation', 'relationship', 'race', 'sex', 'capitalgain',
                   'capitalloss', 'hoursperweek', 'native']]
y_test = test_data['Salary']

# Encoding categorical variables
X_train = pd.get_dummies(X_train, columns=['workclass', 'education', 'maritalstatus', 'occupation', 'relationship', 'race', 'sex', 'native'])
X_test = pd.get_dummies(X_test, columns=['workclass', 'education', 'maritalstatus', 'occupation', 'relationship', 'race', 'sex', 'native'])

# Gaussian Naive Bayes
start_time = time.time()
gnb = GaussianNB()
gnb.fit(X_train, y_train)
gnb_pred = gnb.predict(X_test)
gnb_accuracy = accuracy_score(y_test, gnb_pred)
gnb_execution_time = time.time() - start_time

print("Gaussian Naive Bayes Accuracy:", gnb_accuracy)
print("Gaussian Naive Bayes Execution Time (seconds):", gnb_execution_time)

# Multinomial Naive Bayes
start_time = time.time()
mnb = MultinomialNB()
mnb.fit(X_train, y_train)
mnb_pred = mnb.predict(X_test)
mnb_accuracy = accuracy_score(y_test, mnb_pred)
mnb_execution_time = time.time() - start_time

print("Multinomial Naive Bayes Accuracy:", mnb_accuracy)
print("Multinomial Naive Bayes Execution Time (seconds):", mnb_execution_time)